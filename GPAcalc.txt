-- This program prints out the GPA of a student
-- Created by Lucas Alcala
-- use AdaGIDE to compile and run

WITH Ada.Integer_Text_Io, Ada.Text_Io;
WITH Ada.Float_Text_Io;
USE Ada.Integer_Text_Io, Ada.Text_Io;

PROCEDURE Gpa_Calc IS
   My_Name           : String (1 .. 31);
   My_Name_Length    : Integer;
   Number_Of_Courses : Integer;
   Number_Count      : Integer          := 1;
   Grade_Letter      : String (1 .. 1);
   Response_Grade    : Float;
   Temp_Hours        : Float            := 0.0;
   Temp_Grade        : Float            := 0.0;
   Course_Hours      : Float;
   Final_Gpa         : Float;
   Total_Hours       : Float            := 0.0;

   Gpa_A : Float := 4.0;
   Gpa_B : Float := 3.0;
   Gpa_C : Float := 2.0;
   Gpa_D : Float := 1.0;
   Gpa_F : Float := 0.0;


BEGIN

   Ada.Text_IO.Put(Item=> "GPA CALCULATOR");
   Ada.Text_IO.New_Line;
   Ada.Text_IO.New_Line;


   -- User inputs name and number of courses taken
  Ada.Text_IO.Put(Item => "Please enter student name: ");
   Ada.Text_IO.Get_Line (
      Item => My_Name,
      Last => My_Name_Length);
   Ada.Text_IO.Put(Item => "How many courses has ");
   Ada.Text_IO.Put(Item => My_Name (1 .. My_Name_Length));
   Ada.Text_IO.Put(Item => " taken: ");
   Ada.Integer_Text_IO.Get (Item => Number_Of_Courses);
   Ada.Text_IO.New_Line;

   --user inputs the grade
   --this goes through the loop and receives the values
   --of the user

   LOOP
      --letter grade
      Put(Item => "Enter grade for course ");
      Put(
         Item  => Number_Count,
         Width => 0);
      Put(Item => ": ");
      Get(Item => Grade_Letter);
      -- Letter grade if statement
      IF Grade_Letter = "A" THEN
         Response_Grade :=Gpa_A;
      ELSIF Grade_Letter = "B"  THEN
         Response_Grade :=Gpa_B;
      ELSIF Grade_Letter = "C" THEN
         Response_Grade :=Gpa_C;
      ELSIF Grade_Letter = "D"THEN
         Response_Grade :=Gpa_D;
      ELSIF Grade_Letter = "F" THEN
         Response_Grade :=Gpa_F;
      ELSE
         Put_Line(Item => "Sorry, that is not a valid grade.");
      END IF;
      Ada.Text_IO.Skip_Line;
      Ada.Text_IO.New_Line;

      --course hour grade
      Put(Item => "Enter credit hours for course ");
      Put(
         Item  => Number_Count,
         Width => 0);
      Put(Item => ": ");
      Ada.Float_Text_IO.Get(Item => Course_Hours);
      Total_Hours:= Total_Hours + Course_Hours;
      Ada.Text_IO.Skip_Line;
      Ada.Text_IO.New_Line;

      --calculates the course hours with the grade
      Temp_Grade := Course_Hours * Response_Grade;
      Temp_Hours := Temp_Hours + Temp_Grade;

      --exit loop
      EXIT WHEN Number_Count = Number_Of_Courses;
      Number_Count:= Number_Count + 1;

   END LOOP;

   -- Output for final grade.
   Ada.Text_IO.Put(Item => My_Name (1 .. My_Name_Length));
   Ada.Text_Io.Put (Item => ", your GPA is ");
   Final_Gpa:= Temp_Hours / Total_Hours;
   Ada.Float_Text_Io.Put (
      Item => Final_Gpa,
      Fore => 0,
      Aft  => 2,
      Exp  => 0);
   Ada.Text_Io.New_Line;

   -- statements for the GPA

   Ada.Text_IO.Put(Item => "Assessment of your GPA: ");
   IF  Final_Gpa >= 3.7 THEN
      Put_Line(Item => "Excellent Job!!");
   ELSIF Final_Gpa >= 3.2 THEN
      Put_Line(Item => "Good Job!!");
   ELSIF Final_Gpa >= 3.0 THEN
      Put_Line(Item => "Not bad!");
   ELSIF Final_Gpa >= 2.0 THEN
      Put_Line(Item => "You can do better!");
   ELSIF Final_Gpa >= 1.0 THEN
      Put_Line(Item => "You need help");
   END IF;
   IF Final_Gpa <= 1.0 THEN
      Put_Line(Item => "Dude, that is lame.");
   END IF;
END Gpa_Calc;
